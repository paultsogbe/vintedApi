{"version":3,"sources":["isAuthenticated.js"],"names":["User","require","req","res","next","token","user","regeneratorRuntime","async","_context","prev","headers","authorization","replace","awrap","findOne","select","sent","abrupt","message","status","json","t0","stop","module","exports","isAuthenticated"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,kBAAfD,gBAAe,SAAAE,EAArBC,EAAAC,GAAqB,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAL,MAAA,KAAA,EAAA,GAAAK,EAAAC,KAAA,EAEGR,EAAAS,QAAAC,cAFH,OAEGP,EAAAH,EAAAS,QAAAC,cAAAC,QAAA,UAAA,IAFHJ,EAAAL,KAAA,EAAAG,mBAAAO,MAEGd,KAAAe,QAAA,CAAAV,MAAAA,IAAAW,OAAA,gBAFHP,EAAAL,KAAA,GAAA,MAAA,KAAA,EAAA,KAEGE,EAFHG,EAAAQ,MAAA,CAAAR,EAAAL,KAAA,GAAA,MAEGF,EAAAI,KAAAA,EAAAF,IAFHK,EAAAL,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAK,EAAAS,OAAA,SAEGf,EAKJD,OAAIS,KAAQC,KAAAA,CAYtBO,QAAS,kBAnBE,KAAA,GAAAV,EAAAL,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAK,EAAAS,OAAA,SAwBRf,EAAIiB,OAAO,KAAKC,KAAK,CAtBVF,QAAA,kBAFH,KAAA,GAAAV,EAAAL,KAAA,GAAA,MAAA,KAAA,GAAAK,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GAEGN,EAAAiB,OAAA,KAAAC,KAAA,CAAAF,QAAAV,EAAAa,GAAAH,UAFH,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAYbC,OAAAC,QAAAC","file":"isAuthenticated.min.js","sourcesContent":["const User = require(\"../models/User\");\n\nconst isAuthenticated = async (req, res, next) => {\n  try {\n    // Si on reçoit bien un token\n    if (req.headers.authorization) {\n      // j'enleve \"Bearer \" du token reçu\n      const token = req.headers.authorization.replace(\"Bearer \", \"\");\n      // Cherche dans la BDD un user qui a ce token en ne récupérant que les clef account et _id\n      const user = await User.findOne({ token: token }).select(\"account _id\");\n      // Si on en trouve un\n      if (user) {\n        // On rajoute une clef user à req contenant le user trouvé\n        req.user = user;\n        // On passe à la suite\n        next();\n      } else {\n        // Sinon on répond une erreur 401\n        return res.status(401).json({\n          message: \"Unauthorized\",\n        });\n      }\n    } else {\n      // Sinon on répond une erreur 401\n      return res.status(401).json({\n        message: \"Unauthorized\",\n      });\n    }\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nmodule.exports = isAuthenticated;\n"]}